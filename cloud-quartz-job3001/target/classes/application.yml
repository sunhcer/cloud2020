spring:
  application:
    name: cloud-quartz-job
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      business: # 配置业务数据源
        url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&characterEncoding=utf-8&useSSL=false
        username: root
        password: mysql1234
        driver-class-name: org.gjt.mm.mysql.Driver
      quartz:   #配置Quartz数据源
        url: jdbc:mysql://localhost:3306/quartz?useUnicode=true&characterEncoding=utf-8&useSSL=false
        username: root
        password: mysql1234
        driver-class-name: org.gjt.mm.mysql.Driver
        # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 15
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      maxPoolPreparedStatementPerConnectionSize: 20
      filters: stat,wall,log4j2
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      remove-abandoned: true
      remove-abandoned-timeout: 180
      log-abandoned: true
  quartz:
    jdbc:
      initialize-schema: never #配置是否每次重启项目都自动生成Quartz表结构,在此使用always生成一次后就可以改为never配置
    job-store-type: jdbc
    properties:
      org:
        quartz:
          scheduler:
            instanceName: etlCleanScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_  #Quartz表前缀
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            #线程数 一个任务使用一个线程
            threadCount: 100
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

  #    redis单机配置
  redis:
    host: localhost
    port: 6379  #可不配，因为底层默认值为6379
#    redis集群配置
#  redis:
#    database: 0
#    pool:
#      max-active: 100 #连接池最大连接数（负值表示没有限制）
#      max-wait: 3000 #连接池最大阻塞等待时间（负值表示没有限制）
#      max-idle: 200 #连接池最大空闭连接数
#      min-idle: 50 #连接汉最小空闲连接数
#      timeout: 600 #连接超时时间（毫秒）
#    cluster:
#      nodes:
#        - 192.168.75.132:6380
#        - 192.168.75.132:6381
#        - 192.168.75.132:6382
#        - 192.168.75.132:6383
#        - 192.168.75.132:6384
#        - 192.168.75.132:6385



server:
  port: 3001
#  自我保护
#  enable-self-preservation: false
#  eviction-interval-timer-in-ms: 2000


eureka:
  client:
    register-with-eureka: true
    fetchRegistry: true
    service-url:
      #      defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7001.com:7001/eureka/
  instance:
    instance-id: job3001 #修改服务集群下的主机名
    prefer-ip-address: true

mybatis:
#  config-location: classpath:mybatis-config.xml
  mapperLocations: classpath:mapper/*.xml
  type-aliases-package: com.atguigu.springcloud.entities